module matrix_former (
    input clk,  // clock
    input rst,  // reset
    input old_matrix[6][6],
    input change_matrix[6][6],
    input valid,
    output new_matrix[6][6],
    output add_score,
    input enable
  ) {
  
  .clk(clk) {
    edge_detector edge_detector(#RISE(1), #FALL(0));    
    .rst(rst) {
      fsm state = {IDLE, CHANGE};
      dff change_matrix_dff[6][6];
      dff valid_dff[1];
    }
  }
  
  always {
    edge_detector.in = valid;
    new_matrix = old_matrix;
    add_score = valid_dff.q;
    
    case(state.q) {
      state.IDLE:
        //if valid signal given, store change_matrix and move to next state
        if (edge_detector.out) {
          change_matrix_dff.d = change_matrix;
          valid_dff.d = 0;
          state.d = state.CHANGE;
        }
                    
      state.CHANGE:
         if (enable) {
            new_matrix = old_matrix^change_matrix_dff.q;
            valid_dff.d = 1;
            state.d = state.IDLE;
          }
    }
  }
}
