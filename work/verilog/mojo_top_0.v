/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [5:0] row,
    output reg [5:0] col,
    input [5:0] buttoncol,
    output reg [5:0] buttonrow,
    input shiftright,
    input shiftleft,
    output reg [6:0] seg,
    output reg [3:0] sel,
    input powerupbut
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [35:0] M_matrix_store_d, M_matrix_store_q = 1'h0;
  localparam SELECTLVL_game_state = 3'd0;
  localparam SELECTHOLE_game_state = 3'd1;
  localparam UPDATEMATRIX_game_state = 3'd2;
  localparam SHIFTMATRIX_game_state = 3'd3;
  localparam MULTIPLIER_game_state = 3'd4;
  
  reg [2:0] M_game_state_d, M_game_state_q = SELECTLVL_game_state;
  reg [2:0] M_powerup_d, M_powerup_q = 1'h0;
  reg [7:0] M_multiplier_dff_d, M_multiplier_dff_q = 1'h0;
  
  wire [6-1:0] M_led_multiplexer_row;
  wire [6-1:0] M_led_multiplexer_column;
  wire [1-1:0] M_led_multiplexer_timerout;
  reg [36-1:0] M_led_multiplexer_inp_int;
  led_multiplexer_2 led_multiplexer (
    .clk(clk),
    .rst(rst),
    .inp_int(M_led_multiplexer_inp_int),
    .row(M_led_multiplexer_row),
    .column(M_led_multiplexer_column),
    .timerout(M_led_multiplexer_timerout)
  );
  
  wire [6-1:0] M_button_multiplex_button_rows;
  wire [1-1:0] M_button_multiplex_new_button;
  wire [3-1:0] M_button_multiplex_br;
  wire [3-1:0] M_button_multiplex_bc;
  reg [6-1:0] M_button_multiplex_button_cols;
  button_multiplex_3 button_multiplex (
    .clk(clk),
    .rst(rst),
    .button_cols(M_button_multiplex_button_cols),
    .button_rows(M_button_multiplex_button_rows),
    .new_button(M_button_multiplex_new_button),
    .br(M_button_multiplex_br),
    .bc(M_button_multiplex_bc)
  );
  
  wire [3-1:0] M_fake_button_conditioner_brout;
  wire [3-1:0] M_fake_button_conditioner_bcout;
  wire [1-1:0] M_fake_button_conditioner_valid;
  reg [3-1:0] M_fake_button_conditioner_bc;
  reg [3-1:0] M_fake_button_conditioner_br;
  fake_button_conditioner_4 fake_button_conditioner (
    .clk(clk),
    .rst(rst),
    .bc(M_fake_button_conditioner_bc),
    .br(M_fake_button_conditioner_br),
    .brout(M_fake_button_conditioner_brout),
    .bcout(M_fake_button_conditioner_bcout),
    .valid(M_fake_button_conditioner_valid)
  );
  
  wire [3-1:0] M_button_sensing2_a_row;
  wire [3-1:0] M_button_sensing2_a_col;
  wire [3-1:0] M_button_sensing2_b_row;
  wire [3-1:0] M_button_sensing2_b_col;
  wire [1-1:0] M_button_sensing2_read;
  reg [3-1:0] M_button_sensing2_but_col;
  reg [3-1:0] M_button_sensing2_but_row;
  reg [1-1:0] M_button_sensing2_valid;
  button_sensing2_5 button_sensing2 (
    .clk(clk),
    .rst(rst),
    .but_col(M_button_sensing2_but_col),
    .but_row(M_button_sensing2_but_row),
    .valid(M_button_sensing2_valid),
    .a_row(M_button_sensing2_a_row),
    .a_col(M_button_sensing2_a_col),
    .b_row(M_button_sensing2_b_row),
    .b_col(M_button_sensing2_b_col),
    .read(M_button_sensing2_read)
  );
  
  wire [1-1:0] M_button_checker_validout;
  wire [36-1:0] M_button_checker_matrixout;
  wire [1-1:0] M_button_checker_invalidout;
  wire [1-1:0] M_button_checker_probe1;
  wire [1-1:0] M_button_checker_probe2;
  wire [3-1:0] M_button_checker_a_rowout;
  wire [3-1:0] M_button_checker_a_colout;
  wire [3-1:0] M_button_checker_b_rowout;
  wire [3-1:0] M_button_checker_b_colout;
  reg [36-1:0] M_button_checker_matrixin;
  reg [3-1:0] M_button_checker_a_row;
  reg [3-1:0] M_button_checker_b_row;
  reg [3-1:0] M_button_checker_a_col;
  reg [3-1:0] M_button_checker_b_col;
  reg [1-1:0] M_button_checker_read;
  button_checker_6 button_checker (
    .clk(clk),
    .rst(rst),
    .matrixin(M_button_checker_matrixin),
    .a_row(M_button_checker_a_row),
    .b_row(M_button_checker_b_row),
    .a_col(M_button_checker_a_col),
    .b_col(M_button_checker_b_col),
    .read(M_button_checker_read),
    .validout(M_button_checker_validout),
    .matrixout(M_button_checker_matrixout),
    .invalidout(M_button_checker_invalidout),
    .probe1(M_button_checker_probe1),
    .probe2(M_button_checker_probe2),
    .a_rowout(M_button_checker_a_rowout),
    .a_colout(M_button_checker_a_colout),
    .b_rowout(M_button_checker_b_rowout),
    .b_colout(M_button_checker_b_colout)
  );
  
  wire [36-1:0] M_matrix_former_new_matrix;
  wire [1-1:0] M_matrix_former_add_score;
  wire [6-1:0] M_matrix_former_alufn;
  wire [8-1:0] M_matrix_former_a;
  wire [8-1:0] M_matrix_former_b;
  wire [1-1:0] M_matrix_former_done;
  reg [36-1:0] M_matrix_former_old_matrix;
  reg [36-1:0] M_matrix_former_change_matrix;
  reg [1-1:0] M_matrix_former_valid;
  reg [1-1:0] M_matrix_former_enable;
  reg [6-1:0] M_matrix_former_alu_result;
  matrix_former_7 matrix_former (
    .clk(clk),
    .rst(rst),
    .old_matrix(M_matrix_former_old_matrix),
    .change_matrix(M_matrix_former_change_matrix),
    .valid(M_matrix_former_valid),
    .enable(M_matrix_former_enable),
    .alu_result(M_matrix_former_alu_result),
    .new_matrix(M_matrix_former_new_matrix),
    .add_score(M_matrix_former_add_score),
    .alufn(M_matrix_former_alufn),
    .a(M_matrix_former_a),
    .b(M_matrix_former_b),
    .done(M_matrix_former_done)
  );
  
  wire [3-1:0] M_mat_shifter_new_power_counter;
  wire [36-1:0] M_mat_shifter_new_matrix;
  wire [6-1:0] M_mat_shifter_alufn;
  wire [8-1:0] M_mat_shifter_a;
  wire [8-1:0] M_mat_shifter_b;
  wire [1-1:0] M_mat_shifter_done;
  reg [1-1:0] M_mat_shifter_shift_left;
  reg [1-1:0] M_mat_shifter_shift_right;
  reg [36-1:0] M_mat_shifter_old_matrix;
  reg [3-1:0] M_mat_shifter_old_powerup_counter;
  reg [1-1:0] M_mat_shifter_enable;
  reg [6-1:0] M_mat_shifter_alu_result;
  mat_shifter_8 mat_shifter (
    .clk(clk),
    .rst(rst),
    .shift_left(M_mat_shifter_shift_left),
    .shift_right(M_mat_shifter_shift_right),
    .old_matrix(M_mat_shifter_old_matrix),
    .old_powerup_counter(M_mat_shifter_old_powerup_counter),
    .enable(M_mat_shifter_enable),
    .alu_result(M_mat_shifter_alu_result),
    .new_power_counter(M_mat_shifter_new_power_counter),
    .new_matrix(M_mat_shifter_new_matrix),
    .alufn(M_mat_shifter_alufn),
    .a(M_mat_shifter_a),
    .b(M_mat_shifter_b),
    .done(M_mat_shifter_done)
  );
  
  wire [8-1:0] M_multiplier_new_multiplier;
  wire [6-1:0] M_multiplier_alufn;
  wire [8-1:0] M_multiplier_a;
  wire [8-1:0] M_multiplier_b;
  wire [1-1:0] M_multiplier_done;
  wire [3-1:0] M_multiplier_check_signala;
  wire [3-1:0] M_multiplier_check_signalb;
  reg [8-1:0] M_multiplier_old_multiplier;
  reg [3-1:0] M_multiplier_ar;
  reg [3-1:0] M_multiplier_ac;
  reg [3-1:0] M_multiplier_br;
  reg [3-1:0] M_multiplier_bc;
  reg [1-1:0] M_multiplier_valid;
  reg [1-1:0] M_multiplier_enable;
  reg [6-1:0] M_multiplier_alu_result;
  multiplier_9 multiplier (
    .clk(clk),
    .rst(rst),
    .old_multiplier(M_multiplier_old_multiplier),
    .ar(M_multiplier_ar),
    .ac(M_multiplier_ac),
    .br(M_multiplier_br),
    .bc(M_multiplier_bc),
    .valid(M_multiplier_valid),
    .enable(M_multiplier_enable),
    .alu_result(M_multiplier_alu_result),
    .new_multiplier(M_multiplier_new_multiplier),
    .alufn(M_multiplier_alufn),
    .a(M_multiplier_a),
    .b(M_multiplier_b),
    .done(M_multiplier_done),
    .check_signala(M_multiplier_check_signala),
    .check_signalb(M_multiplier_check_signalb)
  );
  
  wire [16-1:0] M_score_digits;
  reg [1-1:0] M_score_inc;
  multi_dec_ctr_10 score (
    .clk(clk),
    .rst(rst),
    .inc(M_score_inc),
    .digits(M_score_digits)
  );
  
  wire [7-1:0] M_multi_seven_seg_seg;
  wire [4-1:0] M_multi_seven_seg_sel;
  reg [16-1:0] M_multi_seven_seg_values;
  multi_seven_seg_11 multi_seven_seg (
    .clk(clk),
    .rst(rst),
    .values(M_multi_seven_seg_values),
    .seg(M_multi_seven_seg_seg),
    .sel(M_multi_seven_seg_sel)
  );
  
  wire [1-1:0] M_score_adder_inc_trig;
  reg [1-1:0] M_score_adder_add;
  reg [8-1:0] M_score_adder_multiplier;
  score_adder_12 score_adder (
    .clk(clk),
    .rst(rst),
    .add(M_score_adder_add),
    .multiplier(M_score_adder_multiplier),
    .inc_trig(M_score_adder_inc_trig)
  );
  
  wire [36-1:0] M_init_get_hole_mat_out;
  wire [36-1:0] M_init_get_hole_led_mat;
  wire [1-1:0] M_init_get_hole_done;
  wire [1-1:0] M_init_get_hole_test_led;
  reg [1-1:0] M_init_get_hole_valid;
  reg [3-1:0] M_init_get_hole_bc;
  reg [3-1:0] M_init_get_hole_br;
  init_get_hole_13 init_get_hole (
    .clk(clk),
    .rst(rst),
    .valid(M_init_get_hole_valid),
    .bc(M_init_get_hole_bc),
    .br(M_init_get_hole_br),
    .mat_out(M_init_get_hole_mat_out),
    .led_mat(M_init_get_hole_led_mat),
    .done(M_init_get_hole_done),
    .test_led(M_init_get_hole_test_led)
  );
  
  wire [36-1:0] M_level_selector_led_matrix;
  wire [3-1:0] M_level_selector_powerup_set;
  wire [1-1:0] M_level_selector_done;
  reg [3-1:0] M_level_selector_button_row;
  reg [1-1:0] M_level_selector_enable;
  reg [1-1:0] M_level_selector_valid;
  level_selector_14 level_selector (
    .clk(clk),
    .rst(rst),
    .button_row(M_level_selector_button_row),
    .enable(M_level_selector_enable),
    .valid(M_level_selector_valid),
    .led_matrix(M_level_selector_led_matrix),
    .powerup_set(M_level_selector_powerup_set),
    .done(M_level_selector_done)
  );
  
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_v;
  wire [8-1:0] M_alu_out;
  reg [6-1:0] M_alu_alufn;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  alu_15 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .z(M_alu_z),
    .n(M_alu_n),
    .v(M_alu_v),
    .out(M_alu_out)
  );
  
  always @* begin
    M_game_state_d = M_game_state_q;
    M_powerup_d = M_powerup_q;
    M_matrix_store_d = M_matrix_store_q;
    M_multiplier_dff_d = M_multiplier_dff_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    M_button_multiplex_button_cols = buttoncol;
    buttonrow = M_button_multiplex_button_rows;
    led[5+2-:3] = M_multiplier_check_signala;
    led[2+2-:3] = M_multiplier_check_signalb;
    M_fake_button_conditioner_bc = M_button_multiplex_bc;
    M_fake_button_conditioner_br = M_button_multiplex_br;
    M_button_sensing2_but_col = M_fake_button_conditioner_bcout;
    M_button_sensing2_but_row = M_fake_button_conditioner_brout;
    M_button_sensing2_valid = M_fake_button_conditioner_valid;
    M_level_selector_enable = 1'h0;
    M_level_selector_button_row = 1'h0;
    M_level_selector_valid = 1'h0;
    M_button_checker_read = M_button_sensing2_read;
    M_button_checker_a_col = M_button_sensing2_a_col;
    M_button_checker_b_col = M_button_sensing2_b_col;
    M_button_checker_a_row = M_button_sensing2_a_row;
    M_button_checker_b_row = M_button_sensing2_b_row;
    M_button_checker_matrixin = M_matrix_store_q;
    led[0+0-:1] = M_button_checker_validout;
    led[1+0-:1] = M_button_checker_invalidout;
    M_led_multiplexer_inp_int = M_matrix_store_q;
    row = M_led_multiplexer_row;
    col = M_led_multiplexer_column;
    M_matrix_former_old_matrix = M_matrix_store_q;
    M_matrix_former_valid = M_button_checker_validout;
    M_matrix_former_change_matrix = M_button_checker_matrixout;
    M_matrix_former_enable = 1'h0;
    M_matrix_former_alu_result = 1'h0;
    M_mat_shifter_old_matrix = M_matrix_store_q;
    M_mat_shifter_enable = 1'h0;
    M_mat_shifter_shift_left = shiftleft;
    M_mat_shifter_shift_right = shiftright;
    M_mat_shifter_old_powerup_counter = M_powerup_q;
    M_mat_shifter_alu_result = 1'h0;
    M_multiplier_ar = M_button_checker_a_rowout;
    M_multiplier_ac = M_button_checker_a_colout;
    M_multiplier_br = M_button_checker_b_rowout;
    M_multiplier_bc = M_button_checker_b_colout;
    M_multiplier_valid = M_button_checker_validout;
    M_multiplier_old_multiplier = M_multiplier_dff_q;
    M_multiplier_dff_d = M_multiplier_new_multiplier;
    M_multiplier_enable = 1'h0;
    M_multiplier_alu_result = 1'h0;
    M_score_adder_add = M_matrix_former_add_score;
    M_score_adder_multiplier = M_multiplier_dff_q;
    M_score_inc = M_score_adder_inc_trig;
    M_multi_seven_seg_values = M_score_digits;
    seg = ~M_multi_seven_seg_seg;
    sel = M_multi_seven_seg_sel;
    M_init_get_hole_br = M_fake_button_conditioner_brout;
    M_init_get_hole_bc = M_fake_button_conditioner_bcout;
    M_init_get_hole_valid = M_fake_button_conditioner_valid;
    if (powerupbut) begin
      
      case (M_powerup_q)
        1'h1: begin
          M_led_multiplexer_inp_int = 36'h000000040;
        end
        2'h2: begin
          M_led_multiplexer_inp_int = 36'h000003000;
        end
        2'h3: begin
          M_led_multiplexer_inp_int = 36'h0001c0000;
        end
        3'h4: begin
          M_led_multiplexer_inp_int = 36'h0003c0000;
        end
        3'h5: begin
          M_led_multiplexer_inp_int = 36'h01f000000;
        end
        3'h6: begin
          M_led_multiplexer_inp_int = 36'hfc0000000;
        end
        1'h0: begin
          M_led_multiplexer_inp_int = 36'h000000000;
        end
      endcase
    end
    
    case (M_game_state_q)
      SELECTLVL_game_state: begin
        M_powerup_d = M_level_selector_powerup_set;
        M_led_multiplexer_inp_int = M_level_selector_led_matrix;
        M_level_selector_button_row = M_fake_button_conditioner_brout;
        M_level_selector_valid = M_fake_button_conditioner_valid;
        M_level_selector_enable = 1'h1;
        M_multiplier_valid = 1'h0;
        M_button_sensing2_valid = 1'h0;
        if (M_level_selector_done) begin
          M_game_state_d = SELECTHOLE_game_state;
        end
      end
      SELECTHOLE_game_state: begin
        M_matrix_store_d = M_init_get_hole_mat_out;
        M_led_multiplexer_inp_int = M_init_get_hole_led_mat;
        M_multiplier_dff_d = 1'h1;
        M_button_sensing2_valid = 1'h0;
        M_multiplier_valid = 1'h0;
        if (M_init_get_hole_done) begin
          M_game_state_d = UPDATEMATRIX_game_state;
        end
      end
      UPDATEMATRIX_game_state: begin
        M_matrix_store_d = M_matrix_former_new_matrix;
        M_alu_a = M_matrix_former_a;
        M_alu_b = M_matrix_former_b;
        M_alu_alufn = M_matrix_former_alufn;
        M_matrix_former_alu_result = M_alu_out;
        M_matrix_former_enable = 1'h1;
        if (M_matrix_former_done) begin
          M_game_state_d = SHIFTMATRIX_game_state;
        end
      end
      SHIFTMATRIX_game_state: begin
        M_matrix_store_d = M_mat_shifter_new_matrix;
        M_alu_a = M_mat_shifter_a;
        M_alu_b = M_mat_shifter_b;
        M_alu_alufn = M_mat_shifter_alufn;
        M_mat_shifter_alu_result = M_alu_out;
        M_powerup_d = M_mat_shifter_new_power_counter;
        M_mat_shifter_enable = 1'h1;
        if (M_mat_shifter_done) begin
          M_game_state_d = MULTIPLIER_game_state;
        end
      end
      MULTIPLIER_game_state: begin
        M_alu_a = M_multiplier_a;
        M_alu_b = M_multiplier_b;
        M_alu_alufn = M_multiplier_alufn;
        M_multiplier_alu_result = M_alu_out;
        M_multiplier_enable = 1'h1;
        if (M_multiplier_done) begin
          M_game_state_d = UPDATEMATRIX_game_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_matrix_store_q <= 1'h0;
      M_powerup_q <= 1'h0;
      M_multiplier_dff_q <= 1'h0;
      M_game_state_q <= 1'h0;
    end else begin
      M_matrix_store_q <= M_matrix_store_d;
      M_powerup_q <= M_powerup_d;
      M_multiplier_dff_q <= M_multiplier_dff_d;
      M_game_state_q <= M_game_state_d;
    end
  end
  
endmodule
